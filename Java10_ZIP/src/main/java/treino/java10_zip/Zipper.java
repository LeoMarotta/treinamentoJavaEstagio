/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package treino.java10_zip;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import javax.swing.JOptionPane;

/**
 *
 * @author leomarotta
 */
public class Zipper extends javax.swing.JFrame {

    /**
     * Creates new form Zipper
     */
    public Zipper() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Zipper");

        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        // TODO add your handling code here:
        File arquivoSelecionado = jFileChooser1.getSelectedFile();

        if (arquivoSelecionado != null) {
            String nomeArquivo = arquivoSelecionado.getName();
            if (nomeArquivo.toLowerCase().endsWith(".zip")) {
                // O arquivo é um arquivo ZIP, então descompacta
                descompactarArquivo(arquivoSelecionado);
            } else {
                // O arquivo não é um arquivo ZIP, então compacta
                compactarArquivo(arquivoSelecionado);
            }
        }       
    }//GEN-LAST:event_jFileChooser1ActionPerformed

private void compactarArquivo(File arquivoOriginal) {
    File arquivoCompactado = new File(arquivoOriginal.getAbsolutePath() + ".zip");

    try (FileOutputStream fos = new FileOutputStream(arquivoCompactado);
         ZipOutputStream zipOut = new ZipOutputStream(fos);
         FileInputStream fis = new FileInputStream(arquivoOriginal)) {

        ZipEntry zipEntry = new ZipEntry(arquivoOriginal.getName());
        zipOut.putNextEntry(zipEntry);

        byte[] bytes = new byte[1024];
        int length;
        while ((length = fis.read(bytes)) >= 0) {
            zipOut.write(bytes, 0, length);
        }

        zipOut.closeEntry();

        JOptionPane.showMessageDialog(this, "Arquivo compactado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

        // Apaga o arquivo original
        if (arquivoOriginal.delete()) {
            System.out.println("Arquivo original apagado com sucesso.");
        } else {
            System.out.println("Falha ao apagar o arquivo original.");
        }

        // Atualiza o JFileChooser para mostrar apenas arquivos existentes
        jFileChooser1.rescanCurrentDirectory();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Erro ao compactar o arquivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

private void descompactarArquivo(File arquivoZip) {
    try (ZipInputStream zis = new ZipInputStream(new FileInputStream(arquivoZip))) {

        File pastaDestino = arquivoZip.getParentFile();

        ZipEntry zipEntry = zis.getNextEntry();
        while (zipEntry != null) {
            File novoArquivo = new File(pastaDestino, zipEntry.getName());

            if (zipEntry.isDirectory()) {
                novoArquivo.mkdirs();
            } else {
                byte[] buffer = new byte[1024];
                try (FileOutputStream fos = new FileOutputStream(novoArquivo)) {
                    int len;
                    while ((len = zis.read(buffer)) > 0) {
                        fos.write(buffer, 0, len);
                    }
                }
            }
            zipEntry = zis.getNextEntry();
        }

        JOptionPane.showMessageDialog(this, "Arquivo descompactado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
        
        // Atualiza o JFileChooser para mostrar o novo arquivo descompactado
        jFileChooser1.rescanCurrentDirectory();
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this, "Erro ao descompactar o arquivo: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    }
}
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Zipper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Zipper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Zipper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Zipper.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Zipper().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables
}
